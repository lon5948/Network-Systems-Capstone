from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.packet import packet, ethernet, ipv4, icmp
from ryu.lib import addrconv

class ExampleSwitch13(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]

    def __init__(self, *args, **kwargs):
        super(ExampleSwitch13, self).__init__(*args, **kwargs)
        # initialize mac address table.
        self.mac_to_port = {}

    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        # Install the table-miss flow entry in default_table
        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,
                                          ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 0, match, actions)

    def add_flow(self, datapath, priority, match, actions, table_id=0):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        # Construct flow_mod message and send it
        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS, actions)]
        mod = parser.OFPFlowMod(
            datapath=datapath, table_id=table_id, priority=priority,
            match=match, instructions=inst)
        datapath.send_msg(mod)

    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        # Get Datapath ID to identify OpenFlow switches
        dpid = datapath.id
        self.mac_to_port.setdefault(dpid, {})

        # Analyze the received packets using the packet library
        pkt = packet.Packet(msg.data)
        eth_pkt = pkt.get_protocol(ethernet.ethernet)
        dst = eth_pkt.dst
        src = eth_pkt.src

        # Get the received port number from packet_in message
        in_port = msg.match['in_port']

        self.logger.info("packet in %s %s %s %s", dpid, src, dst, in_port)

        # Learn a MAC address to avoid FLOOD next time
        self.mac_to_port[dpid][src] = in_port

        # Check if the packet is ICMP
        is_icmp = False
        if eth_pkt.ethertype == ether_types.ETH_TYPE_IP:
            ip_pkt = pkt.get_protocol(ipv4.ipv4)
            if ip_pkt.proto == inet.IPPROTO_ICMP:
                is_icmp = True

        # Install flow entry in filter_table_1
        actions = []
        if is_icmp:
            match = parser.OFPMatch(eth_type=eth_pkt.ethertype, in_port=in_port)
            actions.append(parser.OFPActionOutput(ofproto.OFPP_CONTROLLER))
            self.add_flow(datapath, 1, match, actions, table_id=1)
        else:
            # Install flow entry in forward_table
            match = parser.OFPMatch(eth_type=eth_pkt.ethertype, in_port=in_port)
            actions.append(parser.OFPActionOutput(ofproto.OFPP_FLOOD))
            self.add_flow(datapath, 1, match, actions, table_id=3)

        # Check if the packet should go to filter_table_2 or forward_table
        if is_icmp:
            # Install flow entry in filter_table_2
            actions = []
            if in_port != 3 and in_port != 4:
                match = parser.OFPMatch(eth_type=eth_pkt.ethertype, in_port=in_port)
                actions.append(parser.OFPActionOutput(ofproto.OFPP_CONTROLLER))
                self.add_flow(datapath, 2, match, actions, table_id=2)
        else:
            # Install flow entry in forward_table
            match = parser.OFPMatch(eth_type=eth_pkt.ethertype, in_port=in_port)
            actions = [parser.OFPActionOutput(ofproto.OFPP_FLOOD)]
            self.add_flow(datapath, 2, match, actions, table_id=3)

        # Construct packet_out message and send it
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER)]
        out = parser.OFPPacketOut(
            datapath=datapath, buffer_id=ofproto.OFP_NO_BUFFER,
            in_port=in_port, actions=actions, data=msg.data)
        datapath.send_msg(out)